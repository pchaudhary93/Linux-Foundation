Lab 12 Piping


Sometimes we can use output of one command as input to another command. This concept is called piping. 
By using piping, multiple commands will work together to fulfill our requirement.


We can implement piping by using vertical bar (|). 
$ ls -l /etc | wc 
215 1940 11872 
First ls got executed and the output of this command will become input to wc command. 


Eg 2: $ ls -l /etc | more 
Eg 3: $ ls -l /etc | wc |wc -l 
The output is: 1 
Eg 4: $ ls -l /etc | head -5 
Note: instead of ls -l we can use ll command, most of linux flavours provides support. 

tee Command: 


Requirement: 
The output of the ls command should be saved to output.txt and should be provided as input to wc command: 
ls -l 1>output.txt | wc 
This command won't work because if we are using redirection in the middle of piping, it will break piping concept. 
In piping, if we want to save the output of one command to a file and if we want to pass that output as input to next command simultaneously, then we should go for tee command. tee command is just like T-Junction or T-Pipe. It will take one input but provides two outputs.
  

Eg 1: To save the output of ls command to a file and to display to the terminal simultaneously. 
$ ls â€“l ðŸ¡ª It will display to the terminal 
$ ls -l > abc.txt ðŸ¡ª It will save to the abc.txt but won't display to the terminal. 
$ ls -l | tee abc.txt
  

Eg 2: To save the output of ls command to a file and send that output as input to wc command 
$ ls -l | tee output.txt | wc â€“l


UNIX/LINUX 
xargs Command: 


Q. Display the output of date command by using echo command with piping concept? 
$ date | echo ðŸ¡ª It won't work because the output of date command is stream, but echo command will accept only command line arguments but not stream. 


$ date | xargs echo ðŸ¡ª xargs command will convert the output stream of date command into command line arguments and these arguments will be passed as input to echo command. 
Hence the job of xargs command is to convert output stream into command line arguments 


Eg 1: Assume input.txt contains file names. Each file contains some data. 
Read file names from the input.txt, write total content to output.txt and display the total number of lines present in output.txt. 


$ cat input.txt | xargs cat | tee output.txt | wc -l 


Eg 2: Assume input.txt contains file names. Read file names from the input.txt and remove all these files. 
$ cat input.txt | xargs rm